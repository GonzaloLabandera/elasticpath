<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>http-mock-server-system-tests</artifactId>
		<groupId>com.elasticpath.extensions</groupId>
		<version>0.0.0-SNAPSHOT</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>http-mock-server-system-tests-cucumber</artifactId>
	<name>HTTP Mock Server Cucumber Tests</name>


	<properties>
		<charset.encoding>UTF-8</charset.encoding>

		<cargo.jvmargs.mock>-ea -XX:+HeapDumpOnOutOfMemoryError</cargo.jvmargs.mock>
		<cargo.jvmargs.mock.logback.threshold>-Dep.logback.console.threshold</cargo.jvmargs.mock.logback.threshold>
		<cargo.jvmargs.ep.external.ehcache.xml.path>-Dep.external.ehcache.xml.path=${project.build.testOutputDirectory}/ehcache-cucumber.xml</cargo.jvmargs.ep.external.ehcache.xml.path>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.elasticpath.extensions</groupId>
			<artifactId>http-mock-server-system-tests-definitions</artifactId>
			<version>0.0.0-SNAPSHOT</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>setup-local-integration-test</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<properties>
				<ep.mock.itest.port.http>${ep.mock.tomcat.port.http}</ep.mock.itest.port.http>
			</properties>

			<dependencies>
				<dependency>
					<groupId>com.elasticpath.extensions</groupId>
					<artifactId>ext-mock-webapp</artifactId>
					<version>${project.version}</version>
					<type>war</type>
				</dependency>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</dependency>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>jcl-over-slf4j</artifactId>
				</dependency>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>log4j-over-slf4j</artifactId>
				</dependency>
				<dependency>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</dependency>
				<dependency>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
				</dependency>
			</dependencies>

			<build>
				<plugins>

					<!-- Randomly allocates an available port to each of the listed properties -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>reserve-network-port</id>
								<goals>
									<goal>reserve-network-port</goal>
								</goals>
								<phase>generate-sources</phase>
								<configuration>
									<portNames>
										<portName>ep.mock.itest.port.http</portName>
										<portName>cargo.tomcat.ajp.port</portName>
										<portName>cargo.rmi.port</portName>
										<portName>cargo.tomcat.shutdown.port</portName>
									</portNames>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Spin up a Webapp Container housing Cortex using Cargo  -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>

						<executions>
							<execution>
								<id>start-dce-container</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<configuration>
										<home>${project.build.directory}/tomcat9x/container</home>
										<properties>
											<cargo.jvmargs>${cargo.jvmargs.mock} ${cargo.jvmargs.mock.logback.threshold} ${cargo.jvmargs.ep.external.ehcache.xml.path}</cargo.jvmargs>
											<cargo.servlet.port>${ep.mock.itest.port.http}</cargo.servlet.port>
											<cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>
											<cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
											<cargo.tomcat.shutdown.port>${cargo.tomcat.shutdown.port}</cargo.tomcat.shutdown.port>
										</properties>
									</configuration>
									<deployables>
										<deployable>
											<groupId>com.elasticpath.extensions</groupId>
											<artifactId>ext-mock-webapp</artifactId>
											<type>war</type>
											<properties>
												<context>${ep.mock.context}</context>
											</properties>
										</deployable>
									</deployables>
								</configuration>
							</execution>
							<execution>
								<id>stop-dce-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
								<configuration>
									<configuration>
										<home>${project.build.directory}/tomcat9x/container</home>
										<properties>
											<cargo.jvmargs>${cargo.jvmargs.mock}</cargo.jvmargs>
											<cargo.servlet.port>${ep.mock.itest.port.http}</cargo.servlet.port>
											<cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>
											<cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
											<cargo.tomcat.shutdown.port>${cargo.tomcat.shutdown.port}</cargo.tomcat.shutdown.port>
										</properties>
									</configuration>
								</configuration>
							</execution>
						</executions>
						<configuration>
							<skip>${skipAllTests}</skip>
							<!-- This project is not designed to run cargo standalone, use tomcat:run-war in the war project you want. -->
							<wait>false</wait>
							<container>
								<containerId>tomcat9x</containerId>
								<artifactInstaller>
									<groupId>org.apache.tomcat</groupId>
									<artifactId>tomcat</artifactId>
									<version>${tomcat.version}</version>
									<type>tar.gz</type>
								</artifactInstaller>
								<timeout>1200000</timeout>
								<dependencies>

									<!-- Logging is required by ActiveMQ at container startup time.
										This is a bit unfortunate as it differs from our regular deployment
										where we deploy slf4j in cortex.war/WEB-INF/lib. -->
									<dependency>
										<groupId>org.slf4j</groupId>
										<artifactId>slf4j-api</artifactId>
									</dependency>
									<dependency>
										<groupId>org.slf4j</groupId>
										<artifactId>jcl-over-slf4j</artifactId>
									</dependency>
									<dependency>
										<groupId>ch.qos.logback</groupId>
										<artifactId>logback-classic</artifactId>
									</dependency>
									<dependency>
										<groupId>ch.qos.logback</groupId>
										<artifactId>logback-core</artifactId>
									</dependency>
								</dependencies>
								<systemProperties>
									<!-- Turn logging down out of the gate.  When slf4j starts at debug things get a bit spammy. -->
									<org.slf4j.simpleLogger.defaultLogLevel>WARN</org.slf4j.simpleLogger.defaultLogLevel>
								</systemProperties>
							</container>
							<configuration>
								<properties>
									<cargo.logging>medium</cargo.logging>
								</properties>

								<files>
									<copy>
										<file>${project.basedir}/src/test/resources/tomcat9x/server.xml</file>
										<tofile>conf/server.xml</tofile>
										<configfile>true</configfile>
										<overwrite>true</overwrite>
									</copy>
									<copy>
										<file>${project.basedir}/src/main/filtered-resources/logback.xml</file>
										<tofile>common/classes/logback.xml</tofile>
										<configfile>true</configfile>
										<overwrite>true</overwrite>
									</copy>
								</files>
							</configuration>
						</configuration>
					</plugin>
					<!-- Pauses test execution until Mock Webapp is ready. Uses an ant script to do this -->

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-deployment-target-properties</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="${skipAllTests}">
										<ant antfile="${basedir}/src/main/scripts/validate.xml"/>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>m2e-lifecycle-mapping</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>${lifecycle-mapping-plugin.version}</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.codehaus.mojo</groupId>
												<artifactId>build-helper-maven-plugin</artifactId>
												<versionRange>[1.7,)</versionRange>
												<goals>
													<goal>reserve-network-port</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore/>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.codehaus.mojo</groupId>
												<artifactId>properties-maven-plugin</artifactId>
												<versionRange>[0,)</versionRange>
												<goals>
													<goal>set-system-properties</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore/>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-dependency-plugin</artifactId>
												<versionRange>[1,)</versionRange>
												<goals>
													<goal>unpack</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore/>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

	</profiles>


	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration combine.self="override">
					<compilerArgs>
						<arg>-Xlint:all</arg>
					</compilerArgs>
					<compilerId>groovy-eclipse-compiler</compilerId>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-compiler</artifactId>
						<version>${groovy.eclipse.compiler.version}</version>
					</dependency>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-batch</artifactId>
						<version>${groovy.eclipse.batch.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Configured for Cucumber -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<encoding>${charset.encoding}</encoding>
					<argLine>-Dfile.encoding=${charset.encoding}</argLine>
					<systemPropertyVariables>
						<ep.mock.baseurl>${ep.mock.url}</ep.mock.baseurl>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<skip>${skipCucumberTests}</skip>
							<systemPropertyVariables>
								<cucumber.options>${cucumber.options}</cucumber.options>
							</systemPropertyVariables>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>