<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:settings="http://www.elasticpath.com/schema/settings"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.elasticpath.com/schema/settings http://www.elasticpath.com/schema/settings/settings.xsd
	">

	<bean id="emailDataFormat" class="org.apache.camel.component.jackson.JacksonDataFormat">
		<constructor-arg name="mapper">
			<bean class="com.fasterxml.jackson.databind.ObjectMapper"/>
		</constructor-arg>
		<constructor-arg name="unmarshalType" type="java.lang.Class" value="com.elasticpath.email.EmailDto"/>
	</bean>

	<!-- This is marked abstract; child beans should supply a value for the 'camelContextId' field.

	If this is not set, the endpoints are shared between Camel contexts, which is rarely the desired result.

	Consider a case where one Camel context is responsible for publishing to an endpoint, and another (perhaps multiple) context(s)
	consume from the same endpoint.  In this scenario, the publishing context would 'own' the endpoint, and would inherit the consumers' routes.
	The routes will appear to function correctly, but will make testing very difficult (NotifyBuilders that inspect the endpoint will fail to
	work, since they are bound to a particular context), and will result in confusing logging wherever the Camel context name is included in the log
	message.
	-->
	<bean id="emailSendingEndpoint" class="org.apache.camel.spring.CamelEndpointFactoryBean" abstract="true">
		<property name="uri">
			<bean parent="settingFactoryBean">
				<property name="path" value="COMMERCE/SYSTEM/EMAIL/channelUri" />
			</bean>
		</property>
	</bean>

	<bean id="emailEnabledPredicate" class="com.elasticpath.messaging.camel.SettingValueBackedPredicate">
		<property name="settingsReader" ref="settingsReader"/>
		<property name="path" value="COMMERCE/SYSTEM/emailEnabled"/>
	</bean>

	<bean id="legacyEmailComposerTemplate" abstract="true"
		  class="com.elasticpath.email.util.impl.LegacyEmailComposerImpl">
		<property name="emailContextFactory" ref="emailContextFactory"/>
		<property name="velocityEngineFactory" ref="velocityEngineFactory" />
		<property name="storeService" ref="storeService" />
		<property name="storeConfig" ref="threadLocalStorage" />
		<property name="storeMessageSource" ref="storeMessageSourceDelegate"/>
		<property name="emailGlobalSenderAddressProvider">
			<settings:setting path="COMMERCE/SYSTEM/EMAIL/emailGlobalSenderAddress" />
		</property>
		<property name="emailGlobalSenderNameProvider">
			<settings:setting path="COMMERCE/SYSTEM/EMAIL/emailGlobalSenderName"/>
		</property>
		<property name="emailTextTemplateEnabledProvider">
			<settings:setting path="COMMERCE/SYSTEM/EMAIL/emailTextTemplateEnabled"/>
		</property>
	</bean>

	<bean id="legacyEmailComposer" parent="legacyEmailComposerTemplate"/>

	<bean id="emailCompositionConfigurationFactoryTemplate"
		  class="com.elasticpath.email.producer.spi.composer.util.impl.EmailCompositionConfigurationFactoryImpl"
		  abstract="true">
		<property name="settingsReader" ref="settingsReader"/>
		<property name="storeMessageSource" ref="storeMessageSourceDelegate"/>
		<property name="storeService" ref="storeService"/>
	</bean>

	<bean id="emailCompositionConfigurationFactory" parent="emailCompositionConfigurationFactoryTemplate"/>

	<bean id="templateRendererTemplate" class="com.elasticpath.email.producer.spi.composer.impl.TemplateRendererImpl"
		  abstract="true">
		<property name="storeConfig" ref="threadLocalStorage"/>
		<property name="velocityEngineInstanceFactory" ref="velocityEngineFactory"/>
	</bean>

	<bean id="templateRenderer" parent="templateRendererTemplate"/>

	<bean id="emailComposerTemplate" abstract="true"
		  class="com.elasticpath.email.producer.spi.composer.impl.EmailComposerImpl">
		<property name="emailContextFactory" ref="emailContextFactory"/>
		<property name="emailCompositionConfigurationFactory" ref="emailCompositionConfigurationFactory"/>
		<property name="templateRenderer" ref="templateRenderer"/>
	</bean>

	<bean id="emailComposer" parent="emailComposerTemplate"/>

	<bean id="emailContextFactoryTemplate" abstract="true"
		  class="com.elasticpath.email.producer.spi.composer.util.impl.EmailContextFactoryImpl">
		<property name="geography" ref="geography" />
		<property name="moneyFormatter" ref="moneyFormatter" />
		<property name="storeThemeMessageSource" ref="storeMessageSource"/>
		<property name="customerService" ref="customerService"/>
		<property name="beanFactory" ref="coreBeanFactory"/>
	</bean>

	<bean id="emailContextFactory" parent="emailContextFactoryTemplate" />

	<bean id="velocityEngineFactory" class="com.elasticpath.commons.util.impl.VelocityEngineInstanceFactoryImpl" >
		<property name="velocityProperties" ref="velocityProperties"/>
	</bean>

	<bean id="velocityProperties" class="java.util.Hashtable">
		<constructor-arg>
			<map>
				<entry key="resource.loader" value="file, class, webapp"/>
				<entry key="file.resource.loader.instance">
					<bean class="com.elasticpath.commons.util.impl.ContextAwareFileResourceLoader">
						<property name="assetRepository" ref="assetRepository"/>
					</bean>
				</entry>
				<entry key="webapp.resource.loader.instance">
					<bean class="com.elasticpath.commons.util.impl.ContextAwareWebappResourceLoader"/>
				</entry>
				<entry key="file.resource.loader.cache" value="false"/>
				<entry key="velocimacro.library" value="electronics/default/templates/velocity/VM_global_library.vm"/>
				<!-- Set velocimacro.library.autoreload to false in Production Environment -->
				<entry key="velocimacro.library.autoreload" value="true"/>
				<entry key="velocimacro.permissions.allow.inline" value="true"/>
				<entry key="velocimacro.permissions.allow.inline.to.replace.global" value="true"/>
				<entry key="velocimacro.permissions.allow.inline.local.scope" value="true"/>
				<entry key="velocimacro.context.localscope" value="false"/>
				<!-- To turn off the message output from velocity macro -->
				<entry key="velocimacro.messages.on" value="false"/>
				<!-- To complete turn off all logging from velocity -->
				<entry key="runtime.log.logsystem.class" value="org.apache.velocity.runtime.log.NullLogSystem"/>
				<entry key="template.encoding" value="UTF-8"/>
				<entry key="resource.manager.class" value="com.elasticpath.commons.util.impl.StoreResourceManagerProxyImpl"/>
				<entry key="input.encoding" value="UTF-8"/>
				<entry key="output.encoding" value="UTF-8"/>
				<entry key="class.resource.loader.class" value="org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"/>
			</map>
		</constructor-arg>
	</bean>

	<bean id="emailProperties" scope="prototype" class="com.elasticpath.email.domain.impl.EmailPropertiesImpl" />

	<bean id="abstractLegacyEventMessageTriggeredEmailRouteBuilderTemplate"
		  class="com.elasticpath.email.handler.LegacyEventMessageTriggeredEmailRouteBuilder"
		  abstract="true">
		<property name="eventMessageDataFormat" ref="eventMessageDataFormat"/>
		<property name="emailDataFormat" ref="emailDataFormat"/>
		<property name="emailEnabledPredicate" ref="emailEnabledPredicate"/>
	</bean>

	<bean id="abstractLegacyEventMessageTriggeredEmailRouteBuilder" parent="abstractLegacyEventMessageTriggeredEmailRouteBuilderTemplate"
		  abstract="true"/>

	<bean id="abstractEventMessageTriggeredEmailRouteBuilderTemplate"
		  class="com.elasticpath.email.handler.EventMessageTriggeredEmailRouteBuilder"
		  abstract="true">
		<property name="eventMessageDataFormat" ref="eventMessageDataFormat"/>
		<property name="emailDataFormat" ref="emailDataFormat"/>
		<property name="emailEnabledPredicate" ref="emailEnabledPredicate"/>
	</bean>

	<bean id="abstractEventMessageTriggeredEmailRouteBuilder" parent="abstractEventMessageTriggeredEmailRouteBuilderTemplate"
		  abstract="true"/>

</beans>